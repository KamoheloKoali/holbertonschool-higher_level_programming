test for 2-matrix_divided.py

>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided([[10, 20, 30], [40, 50, 60]], 2.5)
[[4.0, 8.0, 12.0], [16.0, 20.0, 24.0]]

>>> matrix_divided([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]], 2)
[[0.75, 1.25, 1.75], [2.25, 2.75, 3.25]]

>>> matrix_divided([[1.2, 2.4, 3.6], [4.8, 6.0, 7.2]], 1.2)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

>>> matrix_divided([[8, 16, 24]], 8)
[[1.0, 2.0, 3.0]]

>>> matrix_divided([[5]], 2)
[[2.5]]

>>> matrix_divided([[1, 2, 'three'], [4, 5, 6]], 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Each row of the matrix must have the same size

>>> matrix_divided(123, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([1, 2, 3], 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "three")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: div must be a number

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero

>>> matrix_divided([[1, [2, 3]], [4, 5, 6]], 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
